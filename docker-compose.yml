# Docker Compose configuration for local development
# This file provides a complete development environment for the FastAPI chat application

version: '3.8'

services:
  # FastAPI application service
  chat-app:
    # Build from local Dockerfile
    build:
      context: .
      dockerfile: Dockerfile

    # Container name for easy reference
    container_name: chat-app-dev

    # Port mapping: host:container
    ports:
      - '8000:8000'

    # Volume mounts for development
    volumes:
      # Persistent SQLite database storage
      - ./data:/app/data
      # Mount source code for development (optional - remove for production-like testing)
      - ./app:/app/app
      - ./alembic:/app/alembic
      - ./alembic.ini:/app/alembic.ini
      # Mount templates if needed
      - ./templates:/app/templates

    # Environment variables
    environment:
      # Python configuration
      - PYTHONPATH=/app
      - PYTHONDONTWRITEBYTECODE=1
      - PYTHONUNBUFFERED=1

      # Development mode
      - ENVIRONMENT=development
      - DEBUG=true

      # Database configuration
      - DATABASE_URL=sqlite+aiosqlite:////app/data/chat_app.db

      # FastAPI configuration
      - HOST=0.0.0.0
      - PORT=8000

      # Auth configuration
      - ACCESS_TOKEN_EXPIRE_MINUTES=60
      - SECRET=your-secret-key-for-development

      # App configuration
      - ONLINE_TIMEOUT_MINUTES=10

    # Restart policy
    restart: unless-stopped

    # Health check configuration
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:8000/health']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

    # Dependency management
    depends_on: []

    # Network configuration (optional)
    networks:
      - chat-app-network

  # Optional: Add additional services here
  # For example, if you want to add Redis, PostgreSQL, etc. in the future

  # redis:
  #   image: redis:7-alpine
  #   container_name: chat-app-redis
  #   ports:
  #     - "6379:6379"
  #   volumes:
  #     - redis-data:/data
  #   networks:
  #     - chat-app-network

# Named volumes for persistent data
volumes:
  # Volume for SQLite database persistence
  chat-app-data:
    driver: local

  # Additional volumes can be added here
  # redis-data:
  #   driver: local

# Custom network for service communication
networks:
  chat-app-network:
    driver: bridge

    # Network configuration
    ipam:
      config:
        - subnet: 172.20.0.0/16
# Development-specific configuration
# You can override settings using docker-compose.override.yml
# Create docker-compose.override.yml for local customizations that shouldn't be committed
