name: CI

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]

env:
  PYTHON_VERSION: '3.11'

jobs:
  test:
    runs-on: ubuntu-latest
    env:
      # Database Configuration - using aiosqlite for async SQLite
      DATABASE_URL: sqlite+aiosqlite:///./test.db
      # Security Configuration
      SECRET: test-secret-key-for-ci-only
      # JWT Configuration
      ALGORITHM: HS256
      ACCESS_TOKEN_EXPIRE_MINUTES: 60
      ONLINE_TIMEOUT_MINUTES: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .

      - name: Cache Playwright browsers
        uses: actions/cache@v3
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-playwright-

      - name: Install Playwright browsers
        run: |
          playwright install --with-deps

      - name: Create test database
        run: |
          alembic upgrade head

      - name: Run linting
        run: |
          black --check .
          isort --check-only .

      - name: Run title case check
        run: |
          python scripts/title_case_check.py

      - name: Run tests
        run: |
          pytest -v --tb=short

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: |
            .pytest_cache/
            test-results.xml
          retention-days: 7

  build-and-test-docker:
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64
          tags: chat-app:test
          load: true
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker image
        run: |
          # Run container using the exact same command as Dockerfile
          # This tests: alembic upgrade head && uvicorn app.main:app --host 0.0.0.0 --port 8000
          docker run -d \
            --name chat-app-test \
            -p 8000:8000 \
            chat-app:test

          # Wait for app to start and migrations to complete
          sleep 15

          # Test health endpoint to verify the app is running
          curl -f http://localhost:8000/health || (docker logs chat-app-test && exit 1)

          # Test API docs endpoint to verify the app is responding
          curl -f http://localhost:8000/docs || (docker logs chat-app-test && exit 1)

          # Show logs for debugging if needed
          echo "Container logs:"
          docker logs chat-app-test

          # Clean up
          docker stop chat-app-test
          docker rm chat-app-test

  # Only run on PRs to prevent duplicate builds
  pr-check:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    needs: [test, build-and-test-docker]

    steps:
      - name: PR Status Check
        run: |
          echo "âœ… All checks passed! Ready to merge."
