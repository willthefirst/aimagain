name: CI - Test and lnt

on:
  pull_request:
    branches: [main]
  workflow_dispatch: # Allow manual runs

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  PYTHON_VERSION: '3.11'
  DATABASE_URL: sqlite+aiosqlite:///./test.db
  SECRET: test-secret-key-for-ci-only
  ALGORITHM: HS256
  ACCESS_TOKEN_EXPIRE_MINUTES: 60
  ONLINE_TIMEOUT_MINUTES: 10

jobs:
  tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[full]

      - name: Cache Playwright browsers
        uses: actions/cache@v3
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-playwright-
      - name: Install Playwright browsers
        run: |
          playwright install --with-deps
      - name: Create test database
        run: |
          alembic -c config/alembic.ini upgrade head

      - name: Run pytest
        run: pytest -v --tb=short

  linting:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pathspec black isort

      - name: Run linting
        run: |
          black --check .
          isort --check-only .

      - name: Run title case check
        run: python scripts/dev/title_case_check.py --check-only

  docker-health-check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Build Docker image for testing
        run: |
          docker build -f ./deployment/docker/Dockerfile -t test-image .

      - name: Create test data directory
        run: |
          mkdir -p ./test-data

      - name: Start application with docker-compose
        run: |
          docker compose -f deployment/docker/docker-compose.test.yml up -d
        env:
          SECRET: ${{ env.SECRET }}
          ACCESS_TOKEN_EXPIRE_MINUTES: ${{ env.ACCESS_TOKEN_EXPIRE_MINUTES }}
          ONLINE_TIMEOUT_MINUTES: ${{ env.ONLINE_TIMEOUT_MINUTES }}
          DATABASE_URL: ${{ env.DATABASE_URL }}
          ALGORITHM: ${{ env.ALGORITHM }}

      - name: Wait for application to be healthy
        run: |
          timeout 60 bash -c 'until docker compose -f deployment/docker/docker-compose.test.yml ps | grep -q healthy; do echo "Waiting for health check..."; sleep 2; done'

      - name: Test application endpoints
        run: |
          # Test the health endpoint
          curl -f http://localhost:8000/health || exit 1
          # Test the docs endpoint
          curl -f http://localhost:8000/docs/ || exit 1

      - name: Show container logs on failure
        if: failure()
        run: |
          docker compose -f deployment/docker/docker-compose.test.yml logs

      - name: Cleanup
        if: always()
        run: |
          docker compose -f deployment/docker/docker-compose.test.yml down
          docker rmi test-image || true
